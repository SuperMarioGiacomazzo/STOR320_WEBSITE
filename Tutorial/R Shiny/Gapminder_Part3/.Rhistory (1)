Part$Predict=ifelse(Part$Predict=="1","Yes","No")
table(Part[,c("lfp","Predict")])
sum(Part$lfp=="Yes")
sum(Part$Predict=="Yes")
192/3
193/3
0.15/0.08
0.16/0.08
0.02/0.08
0.92^3
0.98^3
0.92^3
0.98^3
0.08^3
0.1*0.1
50/200
50/100
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
set.seed(216) #DO NOT CHANGE
COMPLETE
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=x,predict=y) #DO NOT CHANGE
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=x,predict=y) #DO NOT CHANGE
train.model.func=function(data,I,J){
mod=lm(W~poly(A,I)+poly(D,J),data=data)
return(mod)
}
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=x,predict=y) #DO NOT CHANGE
train.model.func=function(data,I,J){
mod=lm(W~poly(A,I)+poly(D,J),data=data)
return(mod)
}
OUT.RMSE=matrix(NA,10,10) #DO NOT CHANGE
for(i in 1:10){
for(j in 1:10){
MOD.DATA=DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
MOD.PREDICT = MOD.DATA %>%
mutate(predict=map2(test,tr.model,~augment(.y,newdata=.x))) %>%
select(predict) %>%
unnest()
OUT.RMSE[i,j]=RMSE.func(actual=MOD.PREDICT$W,predict=MOD.PREDICT$.fitted)
}
}
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
OUT.RMSE=matrix(NA,10,10) #DO NOT CHANGE
for(i in 1:10){
for(j in 1:10){
MOD.DATA=DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
MOD.PREDICT = MOD.DATA %>%
mutate(predict=map2(test,tr.model,~augment(.y,newdata=.x))) %>%
select(predict) %>%
unnest()
OUT.RMSE[i,j]=RMSE.func(actual=MOD.PREDICT$W,predict=MOD.PREDICT$.fitted)
}
}
i=1
j=1
DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
DATA2
DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
DATA2
train.model.func=function(data,I,J){
mod=lm(W~poly(A,I)+poly(D,J),data=data)
return(mod)
}
OUT.RMSE=matrix(NA,10,10) #DO NOT CHANGE
OUT.RMSE
i=1
j=1
DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
DATA2
train.model.func=function(data,I,J){
mod=lm(W~poly(A,I)+poly(D,J),data=data)
return(mod)
}
library(purrr)
library("purrr", lib.loc="~/R/win-library/3.5")
purrr$map
mapply(function, ...)
DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
train.model.func(DATA,I=1,J=1)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=x,predict=y) #DO NOT CHANGE
train.model.func=function(data,i,j){
mod=lm(W~poly(A,i)+poly(D,j),data=data)
return(mod)
}
OUT.RMSE=matrix(NA,7,7) #DO NOT CHANGE
for(i in 1:7){
for(j in 1:7){
MOD.DATA=DATA2 %>% mutate(tr.model=map(train,train.model.func,i=i,j=j))
MOD.PREDICT = MOD.DATA %>%
mutate(predict=map2(test,tr.model,~augment(.y,newdata=.x))) %>%
select(predict) %>%
unnest()
OUT.RMSE[i,j]=RMSE.func(actual=MOD.PREDICT$W,predict=MOD.PREDICT$.fitted)
}
}
print(OUT.RMSE) #DO NOT CHANGE
OUT.RMSE2=as.tibble(OUT.RMSE) %>%
mutate(i=1:7) %>%
rename(`1`=V1,`2`=V2,`3`=V3,`4`=V4,`5`=V5,`6`=V6,`7`=V7) %>%
select(i,everything()) %>%
gather(`1`:`7`,key="j",value="RMSE",convert=T) %>%
mutate(i=as.factor(i),j=as.factor(j))
head(OUT.RMSE2)
BEST5.RMSE = OUT.RMSE2 %>% filter(min_rank(RMSE)<=5)
head(BEST5.RMSE) #DO NOT CHANGE
ggplot(DATA) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature")
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[1]))+poly(D,as.numeric(BEST5.RMSE$j[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[2]))+poly(D,as.numeric(BEST5.RMSE$j[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[3]))+poly(D,as.numeric(BEST5.RMSE$j[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[4]))+poly(D,as.numeric(BEST5.RMSE$j[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[5]))+poly(D,as.numeric(BEST5.RMSE$j[5])),data=DATA)))
BEST5.DATA2 = BEST5.DATA %>% gather(First:Fifth,key="Model",value="Predict",factor_key=T)
head(BEST5.DATA2) #DO NOT CHANGE
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[1]))+poly(D,as.numeric(BEST5.RMSE$j[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[2]))+poly(D,as.numeric(BEST5.RMSE$j[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[3]))+poly(D,as.numeric(BEST5.RMSE$j[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[4]))+poly(D,as.numeric(BEST5.RMSE$j[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$i[5]))+poly(D,as.numeric(BEST5.RMSE$j[5])),data=DATA)))
BEST5.DATA
BEST5.DATA2 = BEST5.DATA %>% gather(First:Fifth,key="Model",value="Predict",factor_key=T)
head(BEST5.DATA2) #DO NOT CHANGE
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
View(BEST5.DATA2)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(modelr)
library(broom)
library(purrr)
DATA=na.omit(read_csv("AirWaterTemp.csv"))
glimpse(DATA)
set.seed(216) #DO NOT CHANGE
DATA2 = DATA %>% crossv_kfold(10)
head(DATA2) #DO NOT CHANGE
x=c(1,3,4) #DO NOT CHANGE
y=c(0,0,0) #DO NOT CHANGE
RMSE.func=function(actual,predict){
mse=mean((actual-predict)^2,na.rm=T)
rmse=sqrt(mse)
return(rmse)
}
RMSE.func(actual=x,predict=y) #DO NOT CHANGE
train.model.func=function(data,I,J){
mod=lm(W~poly(A,I)+poly(D,J),data=data)
return(mod)
}
OUT.RMSE=matrix(NA,7,7) #DO NOT CHANGE
for(i in 1:7){
for(j in 1:7){
MOD.DATA=DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
MOD.PREDICT = MOD.DATA %>%
mutate(predict=map2(test,tr.model,~augment(.y,newdata=.x))) %>%
select(predict) %>%
unnest()
OUT.RMSE[i,j]=RMSE.func(actual=MOD.PREDICT$W,predict=MOD.PREDICT$.fitted)
}
}
print(OUT.RMSE) #DO NOT CHANGE
OUT.RMSE=matrix(NA,7,7) #DO NOT CHANGE
for(i in 1:7){
for(j in 1:7){
MOD.DATA=DATA2 %>% mutate(tr.model=map(train,train.model.func,I=i,J=j))
MOD.PREDICT = MOD.DATA %>%
mutate(predict=map2(test,tr.model,~augment(.y,newdata=.x))) %>%
select(predict) %>%
unnest()
OUT.RMSE[i,j]=RMSE.func(actual=MOD.PREDICT$W,predict=MOD.PREDICT$.fitted)
}
}
print(OUT.RMSE) #DO NOT CHANGE
OUT.RMSE2=as.tibble(OUT.RMSE) %>%
mutate(I=1:7) %>%
rename(`1`=V1,`2`=V2,`3`=V3,`4`=V4,`5`=V5,`6`=V6,`7`=V7) %>%
select(I,everything()) %>%
gather(`1`:`7`,key="J",value="RMSE",convert=T) %>%
mutate(I=as.factor(I),J=as.factor(J))
head(OUT.RMSE2)
BEST5.RMSE = OUT.RMSE2 %>% filter(min_rank(RMSE)<=5)
head(BEST5.RMSE) #DO NOT CHANGE
ggplot(DATA) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature")
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=W,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="blue")
BEST5.DATA2
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
View(BEST5.DATA2)
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
View(OUT.RMSE2)
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=W,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="red")
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="red")
-6/(20/sqrt(14))
-6/(20/sqrt(94))
sqrt(4*9-9)
sqrt(4*9-9)
sqrt(4*9+9)
(1-0.41)^5*0.41
(1-0.41)^4*0.41
n=500
p=0.41
n*p
z=(250-n*p)/(sqrt(n*p*(1-p)))
z
n*p*(1-p)
p*(1-p)
z=(250-n*p)/(sqrt(n*p*(1-p)))
z
dnorm(z)
z
n*p
250-n*p
n*p*(1-p)
z=(250-n*p)/(
)
sqrt(n*p*(1-p))
dnorm(z)
z
dnorm(z)
?dnorm
pnorm(z)
pnorm(z)*100
z
10/sqrt(100)
n=(10/0.05)^2
n
n=(10/0.04)^2
n=(10/0.25)^2
n=(10/0.22)^2
(10/0.22)^2
(74-75)/(10/sqrt(4))
(74-75)/(10/sqrt(4))
pnorm(-0.2)
pnorm(0.2)
pnorm(0.2)-pnorm(-0.2)
pnorm(0.2)
pnorm(0.2)-pnorm(-0.2)
pnorm(-0.2)
pnorm(0.2)
pnorm(0.2)-pnorm(-0.2)
57.93-42.07
pnorm(0.2)-pnorm(-0.2)
pnorm(-0.2)
pnorm(0.2)
pnorm(-0.2)
pnorm(0.2)
57.93-42.07
1.5-1.96*(0.25/sqrt(50))
1.5+1.96*(0.25/sqrt(50))
1.5-1.96*(0.25/50)
1.5+1.96*(0.25/50)
2-1.96*(0.25/sqrt(50))
2+1.96*(0.25/sqrt(50))
(2-1.5)/(0.25/sqrt(50))
473.36/6
0.92^3
4*9+9
(1-0.41)^4*0.41
15*5
shiny::runApp('D:/Mario Documents/UNC/STOR 320/STOR320_WEBSITE/Tutorial/R Shiny/Gapminder_Start')
runApp('D:/Mario Documents/UNC/STOR 320/STOR320_WEBSITE/Tutorial/R Shiny/Gapminder_Part2')
runApp('D:/Mario Documents/UNC/STOR 320/STOR320_WEBSITE/Tutorial/R Shiny/Gapminder_Part3')
shiny::runApp()
